Q1. Where are we instantiating instances of the Property class?
In our seeds file so that we can run functions using those objects.

Q2. Where are we defining the SQL that enables us to save the ruby Property object into the database?
In our sql file in our database folder by running this file it initiates the table with column headings allowing us to fill the database.

Q3. In console.rb, which lines modify the database?
Any functions that are called using the objects that we created to call functions in the main file that run the sql code that modifies the database.

Q4. Why do we not define the id of a Property object at the point we instantiate it (‘new it up’)?
We could since the initialize function has been set up to accept an id, however this could lead to problems if a user accidentally uses the same id to initiate another object.

Q5. Where and how do we assign the id (that is generated by the database) to the ruby Property object?
In our save function we grab the id generated from the database and manually assign it to the ruby object after converting it to an integer.

Q6. Why do we put a guard (an if clause) on the @id attribute in the constructor?
It will assign a value of 0 if nothing is given since .to_i converts anything that does not have a numeric value to 0 and will assign all properties to that id if they do not have an id given.

Q7. Why are some of the CRUD actions represented by instance methods, and others by class methods?
In some cases we do not require an object to call a function and it would be more efficient and allows functions to run that are not dependent on object values such as read all or delete all.

Q8. What type of data structure is returned by calls to db.exec_prepared()?
The data structure returned is the same as what was used to initiate the class and in this case it would return hashes.
 In the save method, how do we access the id from the returned data structure?
We grab the hash values then map them to an array then grab the first item at index 0 which would be the id number.

Q9. Why do we use prepared statements when performing database operations?
This prevents and sql executable code from being injected into our code via any values that we tell sql to get. By using prepared statements sql will check the array where the values should be stored for any sql executable code.
